// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id        String   @id @default(ulid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  projects Project[]
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  STAFF
  CLIENT
}

model User {
  id        String   @id @default(ulid())
  name      String
  email     String   @unique
  role      UserRole
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  staffProfile  StaffProfile?
  projects      Project[]
  createdTasks  Task[]        @relation("CreatedTasks")
  assignedTasks Task[]        @relation("AssignedTasks")
  modules      Module[]    @relation("CreatedModules")
}

enum StaffPosition {
  MANAGER
  EMPLOYEE
  DESIGNER
  DEVELOPER
  TEAM_LEAD
}

model StaffProfile {
  id         String        @id @default(cuid())
  userId     String        @unique
  user       User          @relation(fields: [userId], references: [id])
  position   StaffPosition
  department String?
  joinedAt   DateTime
  phone      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  CANCELLED
  ON_HOLD
}

model Project {
  id          String        @id @default(ulid())
  name        String
  description String?
  status      ProjectStatus @default(ONGOING)
  clientId    String?
  client      Client?       @relation(fields: [clientId], references: [id])
  createdById String
  createdBy   User          @relation(fields: [createdById], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  modules Module[]
  tasks    Task[]
}

model Module {
  id          String   @id @default(ulid())
  name        String
  description String?
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  createdById String
  createdBy   User     @relation("CreatedModules", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  REVIEW
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Task {
  id          String       @id @default(ulid())
  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  moduleId String?
  module   Module? @relation(fields: [moduleId], references: [id])

  createdById String
  createdBy   User   @relation("CreatedTasks", fields: [createdById], references: [id])

  assignees User[] @relation("AssignedTasks")

  dueDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
