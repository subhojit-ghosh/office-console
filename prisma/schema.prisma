// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                    String   @id @default(ulid())
  name                  String   @unique
  timeDisplayMultiplier Decimal  @default(1.00) @db.Decimal(4, 2)
  showAssignees         Boolean  @default(true)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  users    User[]
  projects Project[]
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  STAFF
  CLIENT_ADMIN
  CLIENT_USER
}

model User {
  id        String   @id @default(ulid())
  name      String
  email     String   @unique
  role      UserRole
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  staffProfile     StaffProfile?
  projects         Project[]
  createdTasks     Task[]         @relation("CreatedTasks")
  assignedTasks    Task[]         @relation("AssignedTasks")
  modules          Module[]       @relation("CreatedModules")
  taskActivities   TaskActivity[] @relation("TaskActivities")
  taskComments     TaskComment[]  @relation("TaskComments")
  projectsAsMember Project[]      @relation("ProjectMembers")
  feedbacks        Feedback[]     @relation("Feedbacks")
  workLogs         WorkLog[]      @relation("WorkLogs")
  archivedTasks    Task[]         @relation("ArchivedTasks")
}

enum StaffPosition {
  MANAGER
  EMPLOYEE
  DESIGNER
  DEVELOPER
  TEAM_LEAD
}

model StaffProfile {
  id         String        @id @default(cuid())
  userId     String        @unique
  user       User          @relation(fields: [userId], references: [id])
  position   StaffPosition
  department String?
  joinedAt   DateTime
  phone      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  CANCELLED
  ON_HOLD
}

model Project {
  id                    String        @id @default(ulid())
  name                  String
  description           String?
  status                ProjectStatus @default(ONGOING)
  clientId              String?
  client                Client?       @relation(fields: [clientId], references: [id])
  timeDisplayMultiplier Decimal?      @db.Decimal(4, 2)
  createdById           String
  createdBy             User          @relation(fields: [createdById], references: [id])
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  modules Module[]
  tasks   Task[]
  members User[]   @relation("ProjectMembers")
}

model Module {
  id                    String   @id @default(ulid())
  name                  String
  description           String?
  projectId             String
  project               Project  @relation(fields: [projectId], references: [id])
  timeDisplayMultiplier Decimal? @db.Decimal(4, 2)
  createdById           String
  createdBy             User     @relation("CreatedModules", fields: [createdById], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  tasks                 Task[]
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  BLOCKED
  DONE
  CANCELED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskType {
  TASK
  BUG
  FEATURE
  IMPROVEMENT
  RESEARCH
  DOCUMENTATION
  TEST
  MEETING
}

model Task {
  id          String       @id @default(ulid())
  type        TaskType     @default(TASK)
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  moduleId String?
  module   Module? @relation(fields: [moduleId], references: [id])

  createdById String
  createdBy   User   @relation("CreatedTasks", fields: [createdById], references: [id])

  assignees User[] @relation("AssignedTasks")

  dueDate      DateTime?
  completedAt  DateTime?
  archivedAt   DateTime?
  archivedById String?
  archivedBy   User?     @relation("ArchivedTasks", fields: [archivedById], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  activities TaskActivity[] @relation("TaskActivities")
  comments   TaskComment[]  @relation("TaskComments")
  workLogs   WorkLog[]      @relation("WorkLogs")
  linksFrom  TaskLink[]     @relation("SourceLinks")
  linksTo    TaskLink[]     @relation("TargetLinks")
}

enum TaskActivityType {
  CREATED
  FIELD_CHANGE
  UPDATED
  ASSIGNED
  UNASSIGNED
}

model TaskActivity {
  id String @id @default(ulid())

  taskId String
  task   Task   @relation("TaskActivities", fields: [taskId], references: [id])

  type     TaskActivityType
  field    String? // Only used when type = FIELD_CHANGE
  oldValue String?
  newValue String?

  userId String
  user   User   @relation("TaskActivities", fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

enum TaskCommentType {
  GENERAL
  BLOCK_REASON
  ON_HOLD_REASON
}

model TaskComment {
  id        String          @id @default(ulid())
  taskId    String
  task      Task            @relation("TaskComments", fields: [taskId], references: [id])
  userId    String
  user      User            @relation("TaskComments", fields: [userId], references: [id])
  content   String
  type      TaskCommentType @default(GENERAL)
  edited    Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum FeedbackType {
  FEEDBACK
  BUG
  FEATURE
  OTHER
}

model Feedback {
  id      String       @id @default(ulid())
  type    FeedbackType @default(FEEDBACK)
  message String
  rating  Int? // Only for type = FEEDBACK

  userId String
  user   User?  @relation("Feedbacks", fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

enum LogSource {
  MANUAL
  AUTOMATIC
}

model WorkLog {
  id String @id @default(ulid())

  taskId String?
  task   Task?   @relation("WorkLogs", fields: [taskId], references: [id])

  userId String
  user   User   @relation("WorkLogs", fields: [userId], references: [id])

  startTime                 DateTime
  endTime                   DateTime
  durationMin               Int
  clientAdjustedDurationMin Int
  note                      String?
  source                    LogSource @default(MANUAL)

  createdAt DateTime @default(now())
}

enum TaskLinkType {
  BLOCKS
  DEPENDS_ON
}

model TaskLink {
  id   String       @id @default(ulid())
  type TaskLinkType

  sourceId String
  source   Task   @relation("SourceLinks", fields: [sourceId], references: [id])

  targetId String
  target   Task   @relation("TargetLinks", fields: [targetId], references: [id])

  createdAt DateTime @default(now())

  @@unique([sourceId, targetId, type])
}
